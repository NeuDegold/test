name.addAll(["nour","osama"]);
name.add("hello");
name.insert(2, "element");
name.insertAll(2,["nour","osama"]);
name.replaceRange(2,5, ["samer"]);
List name =["ali","amer","degold","osama","soso","ahmed","wolrd"];
// // print(name.length is List) ;

Map myMap ={"name":"ali","age":"33"};

Set myset ={"name","age","name"};

Map myMap ={"name":"ali","age":"33"};
===============
set name = new set();
=================
Set myset ={"name","age","amer","soso","nour","ali","osama"};
// myset.addAll({"nour","ali","osama"});
// myset.remove("nour");
myset.removeAll({1,3,"nour"});

Set name = {};

  Map myMap = {"name": "ali", "age": "33","age":"33" ,"address": 34343, "gender": "male"};

  myMap.forEach((key, value) {
    
     name.add(value);
    
    
    });
    print(name.toList());

import 'dart:math' as math;

import 'second.dart';

void main() {
  
  math.sqrt(44);
  
}

String name = "degold";
 name.runes.forEach((element) {print(element);});

   myMax(List<int> arr){

  int max = arr[0];
  for(int i =0 ; i < arr.length ; i ++)
  if(arr[i] > max)
  max = arr[i];

  return max;


  List name = ["amer ", "osama","degold"];
  Map myMap = name.asMap();
  print(myMap);


//=============================
  List name = ["amer ", "osama","degold"];
 name.shuffle();
}

//=============================
  List name = ["amer ", "osama","degold",4,5,3,88,9];
var num = name.whereType<int>();
print(num);

//4, 5, 3, 88, 9)

//=============================
  List name = ["amer","degold","nour","osama"];
var num = name.where((element) => element.length == 6);
print(num);

//degold


====================// one myone = new one("spartacus..");
  ///print(myone.name);
  //spartacus..

class User {
  String name;
  User(this.name);
}

class one extends User{
 String name;
 one(this.name) :super(name);

}

//+=====================
String name ="osama";
// User user = new User();
// print(user.name);
one myone = new one();
print(myone.name);
}

 abstract  class User{
  String name = "degold";
  // class abstract bloss fur extends kann nicht in main aklearin
 }
 class one extends User{                                                     
 }

=====================

second mysec = new second();
mysec.func();
print(mysec.name);

}

class first{
  
   void func(){}
   String name ="";

 
}

class second implements first {
  String name = "amer";
void func(){
  print("message from Second func..");
}

===============

 status myst = status.online;
  if(myst == status.online){
    print("du bist connected");
  }else{
    print("kein verblinedung");
  }
}

enum status { online, offline }

======================
String pattern = r'(^(?:[+0]9)?[0-9]{10,12}$)';
RegExp myreg  = new RegExp(pattern);
String phone = "07821653089";

print(myreg.hasMatch(phone));
 
}
//true


=============
//private  (_)
one myfirst = new one();
myfirst._func();
}

class first {

  _func(){
    print("hello form first");
  }
}


class one  extends first{


}
=============================

//mixin => wie ein abstract class

first myfirst = new first();
print(myfirst.name + myfirst.age + myfirst.address);

}
mixin class one  {
String name = "degold";
}
mixin class two  {
String age = "25";

}

mixin class three  {
String address = "alKut-5555";

}

class first with one , two,three{
  
 
}
